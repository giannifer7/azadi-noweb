# Docker build environments

<[@file packaging/scripts/docker/Builders.dockerfile]>=
# packaging/scripts/docker/Builders.dockerfile
# Base builder with common tools
FROM rust:1.75-slim as base
WORKDIR /build
RUN apt-get update && apt-get install -y \
    build-essential \
    python3 \
    python3-pip \
    git \
    && rm -rf /var/lib/apt/lists/*

# Debian builder with cargo-deb
FROM base as debian-builder
RUN cargo install cargo-deb
COPY packaging/scripts/pyproject.toml packaging/scripts/requirements.txt ./
RUN pip3 install -r requirements.txt
# We'll mount the project directory at runtime
CMD ["python3", "packaging/scripts/generator.py", "--distributions=deb"]

# Void Linux glibc builder
FROM ghcr.io/void-linux/void-linux:latest-full-x86_64 as void-glibc-builder
RUN xbps-install -Syu && \
    xbps-install -y bash git gcc rust cargo base-devel python3 python3-pip
COPY packaging/scripts/pyproject.toml packaging/scripts/requirements.txt ./
RUN pip3 install -r requirements.txt
CMD ["python3", "packaging/scripts/generator.py", "--distributions=void-glibc"]

# Void Linux musl builder
FROM ghcr.io/void-linux/void-linux:latest-full-x86_64-musl as void-musl-builder
RUN xbps-install -Syu && \
    xbps-install -y bash git gcc gcompat base-devel rust cargo python3 python3-pip
COPY packaging/scripts/pyproject.toml packaging/scripts/requirements.txt ./
RUN pip3 install -r requirements.txt
CMD ["python3", "packaging/scripts/generator.py", "--distributions=void-musl"]
$$

<[@file packaging/scripts/docker/docker-compose.yml]>=
# packaging/scripts/docker/docker-compose.yml
version: '3.8'

x-common-volumes: &common-volumes
  volumes:
    - ../../..:/build
    - cargo-cache:/usr/local/cargo/registry
    - package-cache:/build/packaging/build

x-common-environment: &common-environment
  environment:
    - CARGO_HOME=/usr/local/cargo
    - RUSTC_WRAPPER=sccache

services:
  debian-build:
    build:
      context: ../../..
      dockerfile: packaging/scripts/docker/Builders.dockerfile
      target: debian-builder
    <<: *common-volumes
    <<: *common-environment

  void-glibc:
    build:
      context: ../../..
      dockerfile: packaging/scripts/docker/Builders.dockerfile
      target: void-glibc-builder
    volumes:
      - ../../..:/build
      - void-glibc-cargo:/root/.cargo
      - void-glibc-cache:/var/cache/xbps
    working_dir: /build/packaging/build/void/glibc
    init: true

  void-musl:
    build:
      context: ../../..
      dockerfile: packaging/scripts/docker/Builders.dockerfile
      target: void-musl-builder
    volumes:
      - ../../..:/build
      - void-musl-cargo:/root/.cargo
      - void-musl-cache:/var/cache/xbps
    working_dir: /build/packaging/build/void/musl
    init: true

volumes:
  cargo-cache:
  void-glibc-cargo:
  void-glibc-cache:
  void-musl-cargo:
  void-musl-cache:
  package-cache:
$$

<[@file packaging/scripts/docker.py]>=
# packaging/scripts/docker.py
"""Docker environment management."""

from __future__ import annotations

import argparse
import subprocess
import sys
from pathlib import Path
from typing import NoReturn

def run_command(cmd: list[str], check: bool = True) -> subprocess.CompletedProcess:
    """Run a command and handle errors."""
    try:
        return subprocess.run(cmd, check=check)
    except subprocess.CalledProcessError as e:
        print(f"Error running command: {' '.join(cmd)}")
        print(f"Exit code: {e.returncode}")
        sys.exit(e.returncode)

def start_builder(variant: str, project_root: Path) -> None:
    """Start and enter a build container."""
    compose_file = project_root / "packaging" / "scripts" / "docker" / "docker-compose.yml"
    
    # Start the container
    run_command([
        "docker", "compose",
        "-f", str(compose_file),
        "run", "--rm",
        f"{variant}-build",
    ])

def cleanup(project_root: Path, remove_volumes: bool = False) -> None:
    """Stop containers and optionally remove volumes."""
    compose_file = project_root / "packaging" / "scripts" / "docker" / "docker-compose.yml"
    cmd = ["docker", "compose", "-f", str(compose_file), "down"]
    if remove_volumes:
        cmd.append("-v")
    run_command(cmd)

def main() -> NoReturn:
    parser = argparse.ArgumentParser(
        description="Manage Docker build environments"
    )
    parser.add_argument(
        "action",
        choices=["debian", "void-glibc", "void-musl", "down", "clean"],
        help="Action to perform"
    )
    
    args = parser.parse_args()
    project_root = Path(__file__).parent.parent.parent
    
    if args.action in ["debian", "void-glibc", "void-musl"]:
        start_builder(args.action, project_root)
    elif args.action == "down":
        cleanup(project_root)
    elif args.action == "clean":
        cleanup(project_root, remove_volumes=True)
    
    sys.exit(0)

if __name__ == "__main__":
    main()
$$

Key features:
1. Clean separation of build environments
2. Shared caching for faster builds
3. Consistent Python environment across builders
4. Simple CLI for managing containers
5. Volume management for caching and builds

Would you like to see:
1. The GitHub Actions workflows that use these Docker environments?
2. How to test the setup locally?
3. Add more builder environments?