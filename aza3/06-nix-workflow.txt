# Nix package workflow and final configurations

First, the Nix-specific workflow:

<[@file .github/workflows/packages-nix.yml]>=
# .github/workflows/packages-nix.yml
name: Build Nix Package

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v4

      - name: Download package files
        uses: actions/download-artifact@v4
        with:
          name: package-files
          path: packaging/build

      - name: Build package
        run: |
          cd packaging/build/nix
          nix build
          
      - name: Test package
        run: |
          result/bin/azadi-noweb --version
          result/bin/azadi-noweb --help

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: nix-package
          path: result
$$

Now let's update the complete release workflow:

<[@file .github/workflows/packages-release.yml]>=
# .github/workflows/packages-release.yml
name: Build and Release Packages
on:
  push:
    tags:
      - 'v*'

jobs:
  generate:
    uses: ./.github/workflows/packages-generate.yml

  alpine:
    needs: generate
    uses: ./.github/workflows/packages-alpine.yml
    with:
      version: ${{ needs.generate.outputs.version }}

  arch:
    needs: generate
    uses: ./.github/workflows/packages-arch.yml
    with:
      version: ${{ needs.generate.outputs.version }}

  debian:
    needs: generate
    uses: ./.github/workflows/packages-debian.yml
    with:
      version: ${{ needs.generate.outputs.version }}

  nix:
    needs: generate
    uses: ./.github/workflows/packages-nix.yml
    with:
      version: ${{ needs.generate.outputs.version }}

  void:
    needs: generate
    uses: ./.github/workflows/packages-void.yml
    with:
      version: ${{ needs.generate.outputs.version }}

  release:
    needs: [generate, alpine, arch, void, debian, nix]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/alpine-package/*
            artifacts/arch-package/*
            artifacts/void-glibc-package/*
            artifacts/void-musl-package/*
            artifacts/debian-package/*
            artifacts/nix-package/*
          generate_release_notes: true
$$

Let's also ensure our complete generate_packages.py is updated:

<[@file packaging/scripts/generate_packages.py]>=
# packaging/scripts/generate_packages.py
"""Package generation script for multiple distributions."""

import hashlib
import re
import shutil
import tomllib
from dataclasses import dataclass
from pathlib import Path
from typing import Dict, Any, Optional, Tuple, List
from urllib.parse import urljoin

import click
import jinja2
import requests

def parse_author(author_str: str) -> Tuple[str, str]:
    """Parse author string into (name, email)."""
    match = re.match(r"(.*?)\s*<(.+?)>", author_str)
    if not match:
        raise ValueError(f"Invalid author format: {author_str}")
    return match.group(1).strip(), match.group(2).strip()

<[cargo_deb_generator]>

<[format_generator]>

def main():
    parser = argparse.ArgumentParser(description="Build packages for multiple distributions")
    parser.add_argument(
        "--distributions",
        default="all",
        help="Comma-separated list of distributions to build for"
    )
    
    args = parser.parse_args()
    project_root = Path(__file__).parent.parent.parent
    
    builder = PackageBuilder(project_root)
    
    if args.distributions == "all":
        distributions = builder.get_supported_distributions()
    else:
        distributions = set(args.distributions.split(","))
        unsupported = distributions - builder.get_supported_distributions()
        if unsupported:
            print(f"Warning: Unsupported distributions: {', '.join(unsupported)}")
            distributions -= unsupported
    
    for dist in sorted(distributions):
        print(f"\nBuilding package for {dist}...")
        try:
            builder.build_package(dist)
        except Exception as e:
            print(f"Error building package for {dist}: {e}")
            continue

if __name__ == "__main__":
    main()
$$

Would you like me to:
1. Add more template files for other distributions?
2. Show the local testing procedure?
3. Add any specific error handling or logging improvements?