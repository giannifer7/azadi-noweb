// ==== Cross-Reference and Multi-File Tests ====
// Tests for chunk references across multiple files and complex expansions

#[test]
fn test_multiple_files_with_cross_references() -> Result<(), ChunkError> {
    let temp = TempDir::new()?;
    let gen_dir = temp.path().join("gen");
    let private_dir = temp.path().join("private");

    fs::create_dir_all(&gen_dir)?;
    fs::create_dir_all(&private_dir)?;

    let safe_writer = SafeFileWriter::new(gen_dir.clone(), private_dir);

    let mut clip = Clip::new(safe_writer, "<<", ">>", "@", &["#".to_string()]);

    clip.read(
        r#"
<<chunk_a>>=
Content of chunk A
@
<<@file file_a.txt>>=
File A content from file1
<<chunk_b2>>
@
"#,
        "file1.noweb",
    );

    clip.read(
        r#"
<<chunk_b>>=
Content of chunk B before referencing chunk A:
<<chunk_a>>
After referencing chunk A.
@
<<chunk_b2>>=
Content of chunk B2
@
"#,
        "file2.noweb",
    );

    clip.read(
        r#"
<<chunk_c>>=
Start of chunk C
<<chunk_a>>
Middle of chunk C
<<chunk_b>>
End of chunk C
@
<<@file file_c.txt>>=
File C content from file3
@
"#,
        "file3.noweb",
    );

    assert!(clip.has_chunk("chunk_a"), "chunk_a should be present");
    assert!(clip.has_chunk("chunk_b"), "chunk_b should be present");
    assert!(clip.has_chunk("chunk_b2"), "chunk_b2 should be present");
    assert!(clip.has_chunk("chunk_c"), "chunk_c should be present");

    let file_chunks = clip.get_file_chunks();
    assert_eq!(file_chunks.len(), 2, "There should be two @file chunks");

    assert!(
        file_chunks.contains(&"@file file_a.txt".to_string()),
        "file_chunks should contain '@file file_a.txt'"
    );
    assert!(
        file_chunks.contains(&"@file file_c.txt".to_string()),
        "file_chunks should contain '@file file_c.txt'"
    );

    clip.write_files()?;

    let content1 = fs::read_to_string(gen_dir.join("file_a.txt"))?;
    assert_eq!(
        content1.trim(),
        "File A content from file1\nContent of chunk B2",
        "file_a.txt should have correct content"
    );

    let content2 = fs::read_to_string(gen_dir.join("file_c.txt"))?;
    assert_eq!(
        content2.trim(),
        "File C content from file3",
        "file_c.txt should have correct content"
    );

    Ok(())
}