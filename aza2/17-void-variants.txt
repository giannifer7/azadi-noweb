I'll update both the metadata.toml and the generator to handle Void Linux variants:

<[@file packaging/templates/metadata.toml]>=
# Output paths for each package format
[paths]
rpm = "packaging/rpm"
deb = "packaging/deb"
arch = "packaging/arch"
alpine = "packaging/alpine"
void-glibc = "packaging/void/glibc"
void-musl = "packaging/void/musl"
nix = "."  # Nix files go in root for flake support

[distributions]
# Supported architectures per distribution
arch = ["x86_64", "aarch64"]

# Distribution-specific dependencies
[distributions.dependencies]
alpine = ["musl"]
arch = ["gcc-libs"]
void-glibc = []
void-musl = ["musl"]
deb = []
rpm = ["glibc >= 2.28"]

# Libc variants
[distributions.libc]
void-glibc = "glibc"
void-musl = "musl"
$$

Let's modify the PackageGenerator class to handle the variants:

<[@file packaging/scripts/generate_packages.py]>=
class PackageGenerator:
    # ... [previous methods remain the same] ...

    def generate_all(self, metadata: PackageMetadata):
        """Generate all package formats."""
        formats = [
            'nix', 'rpm', 'deb', 'arch', 'alpine',
            'void-glibc', 'void-musl'  # Separate void variants
        ]
        for format_name in formats:
            self.generate_format(format_name, metadata)

    def get_output_path(self, format_name: str) -> Path:
        """Get the output path for a given format."""
        output_files = {
            'nix': 'flake.nix',
            'rpm': 'azadi-noweb.spec',
            'deb': 'control',
            'arch': 'PKGBUILD',
            'alpine': 'APKBUILD',
            'void-glibc': 'template',
            'void-musl': 'template'
        }
        base_path = self.output_base / self.config['paths'].get(format_name, f'packaging/{format_name}')
        return base_path / output_files[format_name]

    def generate_format(self, format_name: str, metadata: PackageMetadata):
        """Generate a specific package format."""
        # Use base template name for variants
        template_name = format_name.split('-')[0] + '.jinja2'
        template = self.env.get_template(template_name)
        output_path = self.get_output_path(format_name)
        output_path.parent.mkdir(parents=True, exist_ok=True)

        # Get libc variant info if applicable
        libc_variant = self.config.get('distributions', {}).get('libc', {}).get(format_name)

        # Combine metadata with distribution-specific info
        template_data = {
            **metadata.__dict__,
            **metadata.get_distribution_info(format_name, self.config),
            'libc_variant': libc_variant
        }

        content = template.render(template_data)
        output_path.write_text(content)
        print(f"Generated {output_path}")
$$

And update the void template to handle the variants:

<[@file packaging/templates/void.jinja2]>=
# Template file for '{{ package_name }}'
pkgname={{ package_name }}
version={{ version }}
revision=1
build_style=cargo
{%- if libc_variant == "musl" %}
archs="~*-musl"
{%- endif %}
short_desc="{{ description }}"
maintainer="{{ maintainer_name }} <{{ maintainer_email }}>"
license="{{ license }}"
homepage="{{ repo_url }}"
distfiles="${homepage}/archive/v${version}.tar.gz"
checksum="{{ sha512sum }}"
{%- if dependencies %}
makedepends="{{ dependencies|join(' ') }}"
{%- endif %}

do_install() {
    vbin target/release/$pkgname
    vlicense LICENSE
    vdoc README.md
}
$$

These changes:
1. Create separate directories for glibc and musl builds
2. Add libc-specific dependencies
3. Add archs restriction for musl builds
4. Keep template logic unified but variant-aware

Would you like me to:
1. Add more variant-specific configurations?
2. Update the GitHub Actions workflow for both variants?
3. Add template customization options for the variants?
