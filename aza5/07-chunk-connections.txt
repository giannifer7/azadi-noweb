# How the chunks connect together

1. Type System Foundation:
   [config_type_definitions] ─▶ Used by PackageGenerator
                            ─▶ Used by all builders
   [cargo_metadata_types] ───▶ Used by PackageMetadata

2. Metadata Handling:
   [distribution_metadata_class] ─▶ Used by PackageGenerator
                                ─▶ Used by all builders
   [utility_functions] ──────────▶ Used by metadata parsing

3. Generator Core:
   [package_generator_class] ────────┐
   [generator_output_methods] ───────┼─▶ Forms complete PackageGenerator
   [generator_format_methods] ───────┘

4. Builder System:
   [builder_base_class] ────────┐
   [debian_builder_class] ──────┼─▶ Forms builder hierarchy
   [void_builder_class] ────────┘

5. Docker Setup:
   [docker_base_setup] ─────┐
   [docker_debian_setup] ───┼─▶ Forms Builders.dockerfile
   [docker_nix_setup] ──────┘

   [docker_volumes] ────────┐
   [docker_compose_services]┼─▶ Forms docker-compose.yml
                           │
6. GitHub Actions:
   [workflow_base_steps] ───┐
   [workflow_docker_steps] ─┼─▶ Used in all workflow files

File Generation Flow:
1. [main_execution] calls PackageGenerator
2. PackageGenerator uses [generator_format_methods]
3. Format methods use [utility_functions] and templates
4. Builders use generated files for actual building

Example of a complete file assembly:
```
generate_packages.py:
   ├─ [config_type_definitions]
   ├─ [cargo_metadata_types]
   ├─ [utility_functions]
   ├─ [distribution_metadata_class]
   ├─ [package_generator_class]
   │   ├─ [generator_output_methods]
   │   └─ [generator_format_methods]
   └─ [main_execution]
```

Would you like me to:
1. Show more detailed relationships between specific chunks?
2. Add sequence diagrams for the build process?
3. Show how specific distribution builds flow through the chunks?