# Introduction to the PackageBuilder class

<[package_builder_usage]>=
def main():
    """Main entry point for package generation."""
    parser = argparse.ArgumentParser(description="Build packages for multiple distributions")
    parser.add_argument(
        "--distributions",
        default="all",
        help="Comma-separated list of distributions to build for"
    )
    
    args = parser.parse_args()
    project_root = Path(__file__).parent.parent.parent
    
    builder = PackageBuilder(project_root)
    
    if args.distributions == "all":
        distributions = builder.get_supported_distributions()
    else:
        distributions = args.distributions.split(",")
    
    for dist in distributions:
        print(f"\nBuilding package for {dist}...")
        try:
            builder.build_package(dist)
        except Exception as e:
            print(f"Error building package for {dist}: {e}")
            continue
$$

<[package_builder_class]>=
class PackageBuilder:
    """Manages package building across different distributions."""
    
    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.config = self._load_config()
        self.env = self._setup_jinja()
        
    def get_supported_distributions(self) -> List[str]:
        """Get list of supported distributions from config."""
        return list(self.config.get("distributions", {}).get("dependencies", {}).keys())
$$

Let's add the basic loading of configuration:

<[package_builder_config]>=
    def _load_config(self) -> Dict[str, Any]:
        """Load distribution configuration from metadata.toml."""
        config_path = self.project_root / "packaging" / "config" / "metadata.toml"
        with open(config_path, "rb") as f:
            return tomllib.load(f)

    def _setup_jinja(self) -> jinja2.Environment:
        """Set up the Jinja2 environment for templates."""
        templates_dir = self.project_root / "packaging" / "templates"
        return jinja2.Environment(
            loader=jinja2.FileSystemLoader(templates_dir),
            undefined=jinja2.StrictUndefined,
            trim_blocks=True,
            lstrip_blocks=True,
        )
$$

Now we can update our generator script to use this:

<[@file packaging/scripts/generate_packages.py]>=
# packaging/scripts/generate_packages.py
"""Package generation script for multiple distributions."""

import argparse
import hashlib
import re
import shutil
import tomllib
from dataclasses import dataclass
from pathlib import Path
from typing import Dict, Any, Optional, Tuple, List

import jinja2

<[package_builder_class]>

<[package_builder_config]>

<[package_builder_usage]>

if __name__ == "__main__":
    main()
$$
